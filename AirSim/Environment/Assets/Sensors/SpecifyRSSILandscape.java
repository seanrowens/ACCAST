/*******************************************************************************
 * Copyright (C) 2017, Paul Scerri, Sean R Owens
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
/*
 * SpecifyRSSILandscape.java
 *
 * Created on February 28, 2006, 1:26 PM
 */

package AirSim.Environment.Assets.Sensors;

import Util.GUI.MutableDoublePanel;
import java.awt.FileDialog;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author  pscerri
 */
public class SpecifyRSSILandscape extends javax.swing.JFrame {
    
    private String saveFileName = null;
    
    /** Creates new form SpecifyRSSILandscape */
    public SpecifyRSSILandscape() {
        initComponents();
        
        northT.setArrayWidth(100);
        northT.setArrayHeight(100);
        northT.setDefaultValue(1.0);
        northT.setMinValue(0.9);
        northT.setMaxValue(1.0);
        
        southT.setArrayWidth(100);
        southT.setArrayHeight(100);
        southT.setDefaultValue(1.0);
        southT.setMinValue(0.9);
        southT.setMaxValue(1.0);
        
        eastT.setArrayWidth(100);
        eastT.setArrayHeight(100);
        eastT.setDefaultValue(1.0);
        eastT.setMinValue(0.9);
        eastT.setMaxValue(1.0);
        
        westT.setArrayWidth(100);
        westT.setArrayHeight(100);
        westT.setDefaultValue(1.0);
        westT.setMinValue(0.9);
        westT.setMaxValue(1.0);
        
        multiT.setArrayWidth(100);
        multiT.setArrayHeight(100);
        multiT.setDefaultValue(1.0);
        multiT.setMinValue(0.0);
        multiT.setMaxValue(2.0);        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        tabbedP = new javax.swing.JTabbedPane();
        northT = new Util.GUI.MutableDoublePanel();
        southT = new Util.GUI.MutableDoublePanel();
        eastT = new Util.GUI.MutableDoublePanel();
        westT = new Util.GUI.MutableDoublePanel();
        multiT = new Util.GUI.MutableDoublePanel();
        resetB = new javax.swing.JButton();
        randomB = new javax.swing.JButton();
        sizeS = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        tabbedP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPStateChanged(evt);
            }
        });

        northT.setBackground(new java.awt.Color(0, 0, 255));
        org.jdesktop.layout.GroupLayout northTLayout = new org.jdesktop.layout.GroupLayout(northT);
        northT.setLayout(northTLayout);
        northTLayout.setHorizontalGroup(
            northTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 594, Short.MAX_VALUE)
        );
        northTLayout.setVerticalGroup(
            northTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 427, Short.MAX_VALUE)
        );
        tabbedP.addTab("North", northT);

        org.jdesktop.layout.GroupLayout southTLayout = new org.jdesktop.layout.GroupLayout(southT);
        southT.setLayout(southTLayout);
        southTLayout.setHorizontalGroup(
            southTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 594, Short.MAX_VALUE)
        );
        southTLayout.setVerticalGroup(
            southTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 427, Short.MAX_VALUE)
        );
        tabbedP.addTab("South", southT);

        org.jdesktop.layout.GroupLayout eastTLayout = new org.jdesktop.layout.GroupLayout(eastT);
        eastT.setLayout(eastTLayout);
        eastTLayout.setHorizontalGroup(
            eastTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 594, Short.MAX_VALUE)
        );
        eastTLayout.setVerticalGroup(
            eastTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 427, Short.MAX_VALUE)
        );
        tabbedP.addTab("East", eastT);

        org.jdesktop.layout.GroupLayout westTLayout = new org.jdesktop.layout.GroupLayout(westT);
        westT.setLayout(westTLayout);
        westTLayout.setHorizontalGroup(
            westTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 594, Short.MAX_VALUE)
        );
        westTLayout.setVerticalGroup(
            westTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 427, Short.MAX_VALUE)
        );
        tabbedP.addTab("West", westT);

        org.jdesktop.layout.GroupLayout multiTLayout = new org.jdesktop.layout.GroupLayout(multiT);
        multiT.setLayout(multiTLayout);
        multiTLayout.setHorizontalGroup(
            multiTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 594, Short.MAX_VALUE)
        );
        multiTLayout.setVerticalGroup(
            multiTLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 427, Short.MAX_VALUE)
        );
        tabbedP.addTab("Multipath", multiT);

        resetB.setText("Reset");
        resetB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBActionPerformed(evt);
            }
        });

        randomB.setText("Randomize");
        randomB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomBActionPerformed(evt);
            }
        });

        sizeS.setMaximum(10);
        sizeS.setMinimum(1);
        sizeS.setPaintLabels(true);
        sizeS.setSnapToTicks(true);
        sizeS.setToolTipText("Brush size");
        sizeS.setName("Brush Size");
        sizeS.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sizeSStateChanged(evt);
            }
        });

        jMenu1.setText("File");
        jMenuItem1.setText("Save As ... ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsRequested(evt);
            }
        });

        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveRequested(evt);
            }
        });

        jMenu1.add(jMenuItem2);

        loadMenuItem.setText("Load");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadRequested(evt);
            }
        });

        jMenu1.add(loadMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tabbedP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(resetB)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(randomB))
                    .add(sizeS, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabbedP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 454, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(resetB)
                    .add(randomB))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 33, Short.MAX_VALUE)
                .add(sizeS, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void loadRequested(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadRequested
        FileDialog fd = new FileDialog(this);
        fd.setVisible(true);
        
        if (fd.getFile() != null) {
            try {
                ObjectInputStream is = new ObjectInputStream(new FileInputStream(fd.getDirectory() + fd.getFile()));
                RSSILandscapeSpecification spec = (RSSILandscapeSpecification)is.readObject();
                
                is.close();
                
                northT.values = spec.north;
                southT.values = spec.south;
                eastT.values = spec.east;
                westT.values = spec.west;
                multiT.values = spec.multipath;
                
                tabbedP.getSelectedComponent().repaint();
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Failed to load: " + ex);
            }
            
        }
    }//GEN-LAST:event_loadRequested
    
    private void SaveRequested(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveRequested
        if (saveFileName != null) {
            doSave(saveFileName);
        } else {
            SaveAsRequested(evt);
        }
    }//GEN-LAST:event_SaveRequested
    
    private void SaveAsRequested(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsRequested
        FileDialog fd = new FileDialog(this);
        fd.setVisible(true);
        
        if (fd.getFile() != null) {
            
            doSave(fd.getDirectory() + fd.getFile());
        }
    }//GEN-LAST:event_SaveAsRequested
    
    private void doSave(String fileName) {
        ObjectOutputStream os;
        try {
            os = new ObjectOutputStream(new FileOutputStream(fileName));
            
            RSSILandscapeSpecification spec = new RSSILandscapeSpecification();
            
            spec.north = northT.values;
            spec.south = southT.values;
            spec.east = eastT.values;
            spec.west = westT.values;
            spec.multipath = multiT.values;
            
            os.writeObject(spec);
            os.flush();
            os.close();
            
            System.out.println("Wrote to: " + fileName);
            
            saveFileName = fileName;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Failed to save: " + ex);
        }
    }
    
    private void tabbedPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPStateChanged
        MutableDoublePanel panel = (MutableDoublePanel)tabbedP.getSelectedComponent();
        sizeS.setValue(panel.getBreadth());
    }//GEN-LAST:event_tabbedPStateChanged
    
    private void sizeSStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sizeSStateChanged
        MutableDoublePanel panel = (MutableDoublePanel)tabbedP.getSelectedComponent();
        panel.setBreadth(sizeS.getValue());
    }//GEN-LAST:event_sizeSStateChanged
    
    private void randomBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomBActionPerformed
        MutableDoublePanel panel = (MutableDoublePanel)tabbedP.getSelectedComponent();
        panel.randomize();
    }//GEN-LAST:event_randomBActionPerformed
    
    private void resetBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBActionPerformed
        MutableDoublePanel panel = (MutableDoublePanel)tabbedP.getSelectedComponent();
        panel.reset();
    }//GEN-LAST:event_resetBActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpecifyRSSILandscape().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Util.GUI.MutableDoublePanel eastT;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem loadMenuItem;
    private Util.GUI.MutableDoublePanel multiT;
    private Util.GUI.MutableDoublePanel northT;
    private javax.swing.JButton randomB;
    private javax.swing.JButton resetB;
    private javax.swing.JSlider sizeS;
    private Util.GUI.MutableDoublePanel southT;
    private javax.swing.JTabbedPane tabbedP;
    private Util.GUI.MutableDoublePanel westT;
    // End of variables declaration//GEN-END:variables
    
}
