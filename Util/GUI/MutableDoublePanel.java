/*******************************************************************************
 * Copyright (C) 2017, Paul Scerri, Sean R Owens
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
/*
 * MutableDoublePanel.java
 *
 * Created on February 28, 2006, 1:33 PM
 */

package Util.GUI;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.util.Random;

/**
 *
 * @author  pscerri
 */
public class MutableDoublePanel extends javax.swing.JPanel {
    
    private double defaultValue = 0.0;
    private double maxValue = 1.0;
    private double minValue = -1.0;
    public double [][] values = null;
    int breadth = 5;
    private int arrayWidth = 300;
    private int arrayHeight = 300;
    
    double delta = 0.0;
    
    /** Creates new form MutableDoublePanel */
    public MutableDoublePanel() {
        this(100, 100, 0.0, 1.0, -1.0);
    }
    
    /** Creates new form MutableDoublePanel */
    public MutableDoublePanel(int width, int height, double defaultValue, double maxValue, double minValue) {
        initComponents();
        
        this.minValue = minValue;
        this.maxValue = maxValue;
        this.defaultValue = defaultValue;
        
        this.arrayWidth = width;
        this.arrayHeight = height;
        
        init();
    }
    
    private void init() {
        delta = (maxValue - minValue)/100.0;
        
        values = new double[getArrayWidth()][getArrayHeight()];
        reset();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MutableDoublePanel.this.mouseDragged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void mouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseDragged
        double dx = ((double)getSize().width)/((double)values.length);
        double dy = ((double)getSize().height)/((double)values[0].length);
        
        int x = (int)(evt.getX()/dx);
        int y = (int)((getSize().height-evt.getY())/dy);
        
        for (int i = -breadth; i < breadth; i++) {
            for (int j = -breadth; j < breadth; j++) {
                if (y + j >= 0 && y + j < values[0].length && x + i >= 0 && x + i < values.length) {
                    if (evt.isShiftDown()) {
                        values[x+i][y+j] = Math.min(maxValue, values[x+i][y+j] + delta);
                    } else {
                        values[x+i][y+j] = Math.max(minValue, values[x+i][y+j] - delta);
                    }
                }
            }
        }
        
        
        repaint();
    }//GEN-LAST:event_mouseDragged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Noticed that this is "flipped", i.e., bottom left is [0][0]
     */
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D)g;
        
        double dx = ((double)getSize().width)/((double)values.length);
        double dy = ((double)getSize().height)/((double)values[0].length);
        
        // System.out.println(getSize() + " for " + values.length + " and " + values[0].length + " -> " + dx + ", " + dy);
        
        double y = 0.0;
        for (int i = 0; i < values.length; i++) {
            double x = 0.0;
            for (int j = 0; j < values[i].length; j++) {
                if (values[j][i] < 0.0) {
                    if (minValue <= 0) {
                        try {
                            g2.setColor(new Color((float)(values[j][i]/(minValue == 0? 1.0 : minValue)), 0.0f, 0.0f));
                        } catch (IllegalArgumentException e) {
                            System.out.println("Cannot: " + e + " " + values[j][i]);
                        }
                    } else {
                        try {
                            g2.setColor(new Color((float)(-values[j][i]/minValue), 0.0f, 0.0f));
                        } catch (IllegalArgumentException e) {
                            System.out.println("Cannot: " + e + " " + values[j][i]);
                        }
                    }
                } else {
                    g2.setColor(new Color( 0.0f, (float)(values[j][i]/(maxValue == 0? 1.0: maxValue)), 0.0f));
                }
                // System.out.println("Filling rect : " + (int)Math.floor(x) + " " + (int)Math.floor(y)+ " " + (int)Math.ceil(dx)+ " " + (int)Math.ceil(dy));
                g2.fillRect((int)Math.floor(x), (int)Math.floor(getSize().height-y), (int)Math.ceil(dx), (int)Math.ceil(dy));
                x += dx;
            }
            y += dy;
        }
    }
    
    public void randomize() {
        Random rand = new Random();
        for (int i = 0; i < values.length; i++) {
            for (int j = 0; j < values[0].length; j++) {
                values[i][j] = minValue + (rand.nextDouble() * (maxValue - minValue));
            }
        }
        repaint();
    }
    
    public void reset() {
        for (int i = 0; i < values.length; i++) {
            for (int j = 0; j < values[0].length; j++) {
                values[i][j] = defaultValue;
            }
        }
        repaint();
    }
    
    public void setBreadth(int b) { this.breadth = b; }
    public int getBreadth() { return breadth; }
    
    public double getDefaultValue() {
        return defaultValue;
    }
    
    public void setDefaultValue(double defaultValue) {
        this.defaultValue = defaultValue;
        reset();
    }
    
    public double getMaxValue() {
        return maxValue;
    }
    
    public void setMaxValue(double maxValue) {
        this.maxValue = maxValue;
    }
    
    public double getMinValue() {
        return minValue;
    }
    
    public void setMinValue(double minValue) {
        this.minValue = minValue;
    }
    
    public int getArrayWidth() {
        return arrayWidth;
    }
    
    public void setArrayWidth(int width) {
        this.arrayWidth = width;
        init();
    }
    
    public int getArrayHeight() {
        return arrayHeight;
    }
    
    public void setArrayHeight(int height) {
        this.arrayHeight = height;
        init();
    }
}
